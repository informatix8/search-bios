'use strict';

import Promise from 'promise-polyfill';
import 'whatwg-fetch';

// jscs:disable validateIndentation
//                                                 .:+@@@@@@@@@@@@@@;`
//                                         .'@@@@@@@@@@@@@@@@@@@@@@@@@@@@+`
//                 `#@@@@#       `,;+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,
//               .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.
//              #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;
//             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
//            :@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,
//            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//           '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;
//           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+
//         ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.
//         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;@@@
//         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@;'@@+
//        ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ #@@
//        ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@
//        :@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#  @@
//        ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@
//        ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  `@@
//        ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'  @@
//        :@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@
//        :@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@
//        ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@
//        ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@
//        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @+
//        .@@@@@@@@@@@@@@@@:@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+ ,@.
//        `@@@@@@@@@@@@@'    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  +@
//        `@@@@@@@@@@@       .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@
//        `@@@@@@@@@'         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@
//         @@@@@@@@#          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.  @`
//         @@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  `@
//         @@@@@@@#           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  ;@
//         @@@@@@@            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @#
//         @@@@@@@            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#  @,
//         @@@@@@@            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'  @
//        `@@@@@@`            @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:  @
//        .@@@@@@             @@@@@@@@@@@@@@:;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,  @
//        :@@@@@@             @@@@@@@@@@@@@#  ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.  @
//        #@@@@@,            `@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`  @
//        @@@@@@             .@@@@@@@@@@@@;    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @
//        @@@@@@             :@@@@@@@@@@@@     +@@@@@@@@@@@@@@@@@@@:     ,@@@@@@@@@@@@@@@@@@@@@   '
//        @@@@@              '@@@@@@@@@@@,     `@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@   .
//       :@@@@@              #@@@@@@@@@@@       @@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@
//       @@@@@               @@@@@@@@@@@:       @@@@@@@@@@                 +@@@@@@@@@@@@@@@@@@@
//      +@@@@+               @@@@@@@@@@@        @@@@@@@@@@                 `@@@@@@@@;@@@@@@@@@@.
//     `@@@@@                @@@@@@@@@@'        @@@@@@@@@@                  @@@@@@@@ +@@@@@@@@@@
//     @@@@@                 @@@@@@@@@@         +@@@@@@@@@                  @@@@@@@@  @@@@@@@@@@
//    @@@@@                  @@@@@@@@@@         :@@@@@@@@@                  @@@@@@@@,  @@@@@@@@@
//   '@@@@                   @@@@@@@@@           @@@@@@@@@                  @@@@@@@@+  '@@@@@@@@#
//   @@@@                    @@@@@@@@@           @@@@@@@@@  @@@'            +@@@@@@@@   @@@@@@@@@
//  @@@@                     @@@@@@@@;           @@@@@@@@@@@@@@@            +@@@@@@@@   +@@@@@@@@`
// ,@@@                     `@@@@@@@@            @@@@@@@@@@@@@@@:           +@@@@@@@@    @@@@@@@@@
// @@@                      :@@@@@@@@            @@@@@@@@@@@@@@@@           @@@@@@@@@    @@@@@@@@@
// @@;                      '@@@@@@@`             @@@@@@@@@@@@@@@           @@@@@@@@@    @@@@@@@@@:
//`@@                       @@@@@@@@              `@@@@@@@@@@@@@@           @@@@@@@@@    :@@@@@@@@@
//.@@                       @@@@@@@+                @@@@@@@@@@@@@           @@@@@@@@#     @@@@@@@@@
// @@                       @@@@@@@                   ,'@@@@@@@@@          ;@@@@@@@@.     @@@@@@@@@
// @@'                      @@@@@@@                        `@@@@.         `@@@@@@@@@      @@@@@@@@@
// @@@+                     @@@@@@;                          @@@         ,@@@@@@@@@@      @@@@@@@@@
// :@                     #@@@@@@@                                       @@@@@@@@@@'     #@@@@@@@@@
//  :                    @@@@@@@@@`                                      @@@@@@@@@@     ;@@@@@@@@@@
//                      @@@@@@@@@@@                                      @@@@@@@@#:     @@@@@@@@@@@
//                      @@@@@@@@@@@                                                     @@@@@@@@@@@
//                      `:;;;:,.                                                        +@@@@@@@',
// jscs:enable validateIndentation

import {clearString} from './helpers';
import {SearchResultDataService} from './interfaces';

export default class SearchResultDataServiceTheta extends SearchResultDataService {

    constructor() {
        super();
        this.contract = {
            category: 'string',
            meta: 'string',
            tags: 'array',
            snippit: 'string'
        };
    }

    fetchResults(model) {
        const query = clearString(model.request.q);

        return new Promise((resolve, reject) => {
            // Testing proof f concept for errors
            if (query === 'fake') {
                resolve([]);
            }
            else if (query === 'error') {
                console.log('pre programmed reject');
                reject('Pre-programmed demo error.');
            }
            else {
                const params = new URLSearchParams();
                params.set('q', query);
                params.set('limit', model.request.limit);
                params.set('sort', model.request.sort);

                fetch('/api/v1/search/theta?' + params.toString(), {
                        headers: {
                            'Content-type': 'application/json'
                        }
                    })
                    .then((response) => {
                        if (response.status >= 200 && response.status < 300) {
                            return response;
                        } else {
                            const error = new Error(response.statusText);
                            error.response = response;
                            throw error;
                        }
                    })
                    .then(response => response.clone().json())
                    .then(json => {
                        resolve(json.data);
                    })
                    .catch((err) => {
                        reject(err);
                    });
            }
        });
    }

}
